{"version":3,"sources":["game/board.js","shipFactory.js","boardfactory.js","playerhelpers.js","ship.js","game/aiPlace.js","gamehelpers.js","refactoredLogic.js","styles/components.js","ReadyPrompt.js","ShipStats.js","ShipList.js","Orientation.js","ShipPlacementList.js","PlacementCell.js","pointer.js","PlacementBoard.js","Placement.js","Board.js","boardRenderHelper.js","aiAttack.js","AITurn.js","HumanTurn.js","turnFader.js","Turns.js","GameOver.js","Init.js","NamePlayers.js","FadeSwitch.js","gameModeHelper.js","Game.js","App.js","useAlert.js","index.js"],"names":["checkIfCellIsInBounds","board","coord","length","checkIfRangeIsInBounds","y","x","horizontal","comparePoint","checkIfClear","cell","ship","checkIfRangeOfCellsAreClear","cellsToCheck","slice","getHorizontalCellsOfBoard","map","row","getVerticalCellsOfBoard","getRangeOfCells","every","placeShipOnBoard","returnBoard","value","index","name","placeHorizontalShip","rowIndex","colIndex","placeVerticalShip","defaultShipArray","createFleet","ships","hits","sunk","placed","createShip","cellTemplate","attacked","createBoard","boardWidth","Array","fill","cellIndex","createPlayer","ai","idIndex","player","shipsPlaced","shots","setShipPlacedInFleet","fleet","shipToPlace","setShipPlaced","attackShipInfleet","newShips","findIndex","hitShip","getAIPlaceShipCoords","possibleCoords","createCoordsList","randHorizontal","Math","floor","random","viableCoords","getAllViableCoords","coords","array2d","coordsList","yIndex","xIndex","push","filter","coordinate","checkIfRangeIsViable","handleTurns","numberOfPlayers","currentTurn","gameReducer","state","action","type","payload","numberOfAI","createInitialState","shipArray","arrayOfNewPlayerNames","newlyNamedPlayers","players","forEach","playerBeingRenamed","playerID","gameMode","returnState","playerList","console","log","newBoard","boards","player_0","shipToRemove","removeShipFromBoard","entry","unplaceShip","attackCellOnBoard","shootingPlayer","turnIndex","lastAttackedPlayer","allowAttack","playersInGame","playersOutOfGame","checkIfPlayerOutOfGame","playerEliminated","checkIfGameOver","gameOver","nextTurn","playerIsReady","currentTurnPlayerIsReady","defaultInitialState","initializeWithMode","i","aiList","aiPlayer","aiPlayerShips","aiPlayerBoard","colors","100","90","50","10","40","20","GlobalStyle","createGlobalStyle","CellWrapper","styled","div","PlayCell","showShip","StyledPlacementCell","bg_color","BoardWrapper","statBoard","over","ShipModelWrapper","p","ShipOrientationWrapper","horizontalPlacement","OrientationFrame","ShipCell","ShipCellLG","ShipWrapper","li","hasBeenPlaced","isCurrentShip","play","Sidebar","allPlayersPlaced","currentSelection","allPLayersPlaced","ShipName","h4","BoardLabel","label","BoardAndLabelWrapper","isVisible","MessageBox","ul","AlertMessage","Button","button","SidebarMessage","SidebarMessageText","fadeIn","ReadyPlayerPrompt","Card","PlayerNameForm","form","FadeWrapper","isOpaque","fadeTime","ReadyPrompt","playerName","setPlayerReady","onClick","ShipStats","selectShipToPlaceOrReplace","shipIndex","indexOfShipToPlace","clickable","placement","useContext","GameContext","from","_","ShipList","shipList","Orientation","toggleHorizontal","id","icon","faSync","ShipPlacementList","shipsToPlace","playerToPlace","shouldPromptPlayerOk","confirmPlayerReady","initMessage","resetMessage","dispatch","GameDispatch","className","setTimeout","PlacementCell","setPointer","getSelectionInformation","currentShip","checkIfValid","valid","cells","some","testRenderStyle","onMouseEnter","usePointer","useState","currentPointer","setCurrentPointer","setNoPointer","getCurrentSelection","startIndex","createArrayFromPointer","testIfSelectionInBounds","PlacementBoard","pointer","handlePlaceShip","onMouseLeave","createCells","Placement","setHorizontalPlacement","setPlayerToPlace","setIndexOfShipToPlace","setShouldPromptPlayerOk","fadeInText","setFadeInText","initMessageText","sideBarMessage","setSideBarMessage","fadeOutInText","useCallback","newText","useEffect","timeoutID","clearTimeout","resultFound","testIndex","h","nextIndex","nextPlayer","nextPlayerID","Board","isAI","addAlert","AlertContext","message","createBoards","allBoards","listOfPlayersToRender","aiAttack","aiID","possiblePlayersToAttack","boardToAttack","allCellsOnBoard","reduce","acc","current","concat","allHitsOnBoard","cellsNextToHits","adjacentCoords","testForAdjacentCoords","cv","allUnattackedCoords","unAttackedCellsNextToHits","coordsToTest","arrayToSelectAttacksFrom","randomCoords","AITurn","gameState","attackTOIDs","useRef","nextTOIDs","currentPlayer","attackHasHappened","attackedCell","attackTOID","timeoutDelayUntilNextTurn","nextTOID","timeout","HumanTurn","TurnFader","showOne","trueContent","falseContent","switcher","setSwitcher","setIsOpaque","didMount","Turns","currentlyDisplayedTurn","setCurrentlyDisplayedTurn","actualCurrentPlayer","shouldShowAIPlayer","setshouldShowAIPlayer","hasMounted","humanTurn","GameOver","winningPlayer","fleetStats","fleetSize","totalHits","countFleetSuccess","round","Init","playerCount","setPlayerCount","aiCount","setAiCount","boardSize","setBoardSize","handleSubmit","e","preventDefault","handleChange","target","parseInt","onSubmit","htmlFor","min","max","onChange","NamePlayers","humanPlayerList","stateObject","humanPlayerID","initInputState","formData","setFormData","FadeSwitch","optionsObject","currentOption","currentlyRendered","setCurrentlyRendered","GameModeHelper","mode","currentTurnPlayerID","prompt","turns","modeDisplayOptions","init","namePlayers","setup","createContext","Game","useReducer","Provider","App","maxMessages","displayTime","alerts","setAlerts","timeoutIDs","clearOldestAlert","oldAlerts","shift","layoutAlert","alert","clearSpecificAlert","useAlert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d8b3fcd.chunk.js","sourcesContent":["export const checkIfCellIsInBounds = (board, coord) => {\n    return coord < board.length && coord >= 0;\n};\nexport const checkIfRangeIsInBounds = (board, y, x, length, horizontal) => {\n    // check and make sure init coords are in bounds\n    if (!checkIfCellIsInBounds(board, x) || !checkIfCellIsInBounds(board, y)) {\n        return false;\n    }\n    // set point to compare to\n    const comparePoint = horizontal ? x : y;\n    // make comparison\n    return board.length - comparePoint - length >= 0;\n};\nexport const checkIfClear = (cell) => {\n    return cell.ship ? false : true;\n};\nexport const getVerticalCellsOfBoard = (board, y, x, length) => {\n    // create array of only rows\n    const relevantRows = board.slice(y, length + y);\n    // get cell from each row within range\n    const returnCells = relevantRows.map((row) => row[x]);\n    // create array of vertical cells\n    return returnCells;\n};\nexport const getHorizontalCellsOfBoard = (board, y, x, length) => {\n    return board[y].slice(x, x + length);\n};\nexport const getRangeOfCells = (board, y, x, length, horizontal) => {\n    return horizontal\n        ? getHorizontalCellsOfBoard(board, y, x, length)\n        : getVerticalCellsOfBoard(board, y, x, length);\n};\nexport const testRangeOfCellsForShip = (cells) => {\n    return cells.every(checkIfClear);\n};\nexport const checkIfRangeOfCellsAreClear = (\n    board,\n    y,\n    x,\n    length,\n    horizontal\n) => {\n    const cellsToCheck = getRangeOfCells(board, y, x, length, horizontal);\n    return testRangeOfCellsForShip(cellsToCheck);\n};\nexport const checkIfRangeIsViable = (board, y, x, length, horizontal) => {\n    // check if coords are in bounds\n    if (!checkIfRangeIsInBounds(board, y, x, length, horizontal)) {\n        return false;\n    }\n    return checkIfRangeOfCellsAreClear(board, y, x, length, horizontal);\n};\nexport const placeHorizontalShip = (board, y, x, ship) => {\n    const returnBoard = [...board];\n    returnBoard[y] = returnBoard[y].map((value, index) => {\n        if (index >= x && index < ship.length + x) {\n            return { ...value, ship: ship.name };\n        }\n        return value;\n    });\n    return returnBoard;\n};\nexport const placeVerticalShip = (board, y, x, ship) => {\n    // place ship on x of each row from row \"y\" to row \"y+ship.length\"\n    return board.map((row, rowIndex) => {\n        if (rowIndex >= y && rowIndex < y + ship.length) {\n            return row.map((cell, colIndex) => {\n                if (colIndex === x) {\n                    return { ...cell, ship: ship.name };\n                }\n                return cell;\n            });\n        }\n        return row;\n    });\n};\nexport const placeShipOnBoard = (board, y, x, ship, horizontal) => {\n    return horizontal\n        ? placeHorizontalShip(board, y, x, ship)\n        : placeVerticalShip(board, y, x, ship);\n};\nexport const removeShipFromBoard = (board, ship) => {\n    return board.map((row) => {\n        return row.map((cell) =>\n            cell.ship === ship.name ? { ...cell, ship: false } : cell\n        );\n    });\n};\nexport const attackCellOnBoard = (board, y, x) => {\n    return board.map((row, rowIndex) =>\n        row.map((cell, cellIndex) => {\n            return rowIndex === y && cellIndex === x\n                ? { ...cell, attacked: true }\n                : cell;\n        })\n    );\n};\n","export const defaultShipArray = [\n    { name: \"patrol boat\", length: 2 },\n    { name: \"submarine\", length: 3 },\n    { name: \"destroyer\", length: 4 },\n    { name: \"battleship\", length: 4 },\n    { name: \"carrier\", length: 5 },\n];\n\nconst createShip = (name, length) => {\n    return {\n        name,\n        length,\n        hits: 0,\n        sunk: false,\n        placed: false,\n    };\n};\n\nexport const createFleet = (ships) => {\n    return ships.map(({ name, length }) => createShip(name, length));\n};\n","const cellTemplate = { ship: false, attacked: false, x: null, y: null };\nexport const createBoard = (boardWidth) => {\n    let board = Array(boardWidth).fill(Array(boardWidth).fill(null));\n    board = board.map((row, rowIndex) =>\n        row.map((cell, cellIndex) => ({\n            ...cellTemplate,\n            x: cellIndex,\n            y: rowIndex,\n        }))\n    );\n    return board;\n};\n","export const createPlayer = (ai, idIndex) => {\n  // create player ai and ID status\n  let name = ai ? `AI ${idIndex}` : `Player ${idIndex + 1}`;\n\n  let player = { ai, shipsPlaced: false, name, shots: 0, hits: 0 };\n  return { ...player };\n};\n\n// board [[{attacked,ship},{...}],[]]\n","export const setShipPlaced = (ship) => {\n    return { ...ship, placed: true };\n};\nexport const setShipPlacedInFleet = (fleet, shipToPlace) => {\n    return fleet.map((ship) =>\n        ship.name === shipToPlace.name ? setShipPlaced(ship) : ship\n    );\n};\nexport const testSunk = (ship) => {\n    return ship.hits >= ship.length ? true : false;\n};\nexport const unplaceShip = (ships, ship) => {\n    return ships.map((entry) => {\n        return entry.name === ship.name ? { ...entry, placed: false } : entry;\n    });\n};\nexport const testIfAllShipsPlaced = (ships) => {\n    return ships.every((ship) => {\n        return ship.placed;\n    });\n};\nexport const createShip = (name, length) => {\n    return {\n        name: name,\n        length: length,\n        hits: 0,\n        sunk: false,\n        placed: false,\n    };\n};\nexport const hitShip = (ship) => {\n    const hits = ship.hits;\n    return { ...ship, hits: hits + 1 };\n};\nexport const sinkShip = (ship) => {\n    return { ...ship, sunk: true };\n};\nexport const attackShip = (ship) => {\n    let returnShip = hitShip(ship);\n    if (returnShip.length <= returnShip.hits) {\n        returnShip = sinkShip(returnShip);\n    }\n    return returnShip;\n};\nexport const attackShipInfleet = (ships, name) => {\n    const newShips = [...ships];\n    const index = newShips.findIndex((ship) => ship.name === name);\n    let hitShip = { ...newShips[index] };\n    hitShip.hits += 1;\n    if (testSunk(hitShip)) hitShip.sunk = true;\n\n    newShips[index] = hitShip;\n    return newShips.map((ship) => ship);\n};\nconst ships = {\n    // defaultShipArray,\n    attackShipInfleet,\n    // createShips,\n    setShipPlacedInFleet,\n    testIfAllShipsPlaced,\n};\nexport default ships;\n","import { checkIfRangeIsViable } from \"./board\";\n// take an array of all possible coords and all ships\nexport const getAIPlaceShipCoords = (board, ship) => {\n    const possibleCoords = createCoordsList(board); //create list of coords\n    const randHorizontal = [true, false][Math.floor(Math.random() * 2)]; //horizontal or vertical\n    // get all possible index coordinates (for end of ship)\n    const viableCoords = getAllViableCoords(\n        possibleCoords,\n        board,\n        ship,\n        randHorizontal\n    );\n    // choose random coord for ship\n    const randomViableCoordIndex = Math.floor(\n        Math.random() * viableCoords.length\n    );\n    return {\n        coords: viableCoords[randomViableCoordIndex],\n        horizontal: randHorizontal,\n    };\n};\nexport const createCoordsList = (array2d) => {\n    const coordsList = [];\n    for (let yIndex = 0; yIndex < array2d.length; yIndex++) {\n        for (let xIndex = 0; xIndex < array2d[yIndex].length; xIndex++) {\n            coordsList.push([yIndex, xIndex]);\n        }\n    }\n    return coordsList;\n};\nexport const getAllViableCoords = (coords, board, ship, horizontal) => {\n    return coords.filter((coordinate) => {\n        return checkIfRangeIsViable(\n            board,\n            coordinate[0],\n            coordinate[1],\n            ship.length,\n            horizontal\n        );\n    });\n};\n\n// filter array to all potential spots for each ship\n// choose spot at random\n","export const checkIfPlayerOutOfGame = (ships) => {\n    // check if all of players ships are sunk\n    return ships.every((ship) => ship.sunk) ? true : false;\n};\nexport const checkIfGameOver = (playersInGame) => {\n    // check and see if there is 1 remaining player\n    return playersInGame.length === 1 ? true : false;\n};\n\nexport const handleTurns = (numberOfPlayers, currentTurn) => {\n    // increment the turn by 1, unless its the last players turn- then go to start\n    const nextTurn = currentTurn >= numberOfPlayers - 1 ? 0 : currentTurn + 1;\n    return nextTurn;\n};\n\nexport const countFleetSuccess = (ships) => {\n    const fleetSize = ships.reduce((acc, cv) => {\n        return acc + cv.length;\n    }, 0);\n    const totalHits = ships.reduce((acc, cv) => {\n        return acc + cv.hits;\n    }, 0);\n    return { totalHits, fleetSize };\n};\n","import {\n  attackCellOnBoard,\n  placeShipOnBoard,\n  removeShipFromBoard,\n} from \"./game/board\";\nimport { createFleet, defaultShipArray } from \"./shipFactory\";\nimport { createBoard } from \"./boardfactory\";\nimport { createPlayer } from \"./playerhelpers\";\nimport { attackShipInfleet, setShipPlacedInFleet, unplaceShip } from \"./ship\";\nimport { getAIPlaceShipCoords } from \"./game/aiPlace\";\nimport {\n  handleTurns,\n  checkIfGameOver,\n  checkIfPlayerOutOfGame,\n} from \"./gamehelpers\";\n\nexport const gameReducer = (state, action) => {\n  switch (action.type) {\n    case \"INITIALIZE-GAME\": {\n      const { numberOfPlayers, numberOfAI, boardWidth } = action.payload;\n      const nextMode = numberOfPlayers > numberOfAI ? \"namePlayers\" : \"play\";\n      return createInitialState(\n        {\n          numberOfPlayers,\n          numberOfAI,\n          boardWidth,\n          shipArray: defaultShipArray,\n        },\n        nextMode\n      );\n    }\n    case \"SET-PLAYER-NAMES\": {\n      const arrayOfNewPlayerNames = action.payload;\n      const newlyNamedPlayers = { ...state.players };\n      arrayOfNewPlayerNames.forEach((player) => {\n        const playerBeingRenamed = newlyNamedPlayers[player.playerID];\n        newlyNamedPlayers[player.playerID] = {\n          ...playerBeingRenamed,\n          name: player.name,\n        };\n      });\n      return { ...state, players: newlyNamedPlayers, gameMode: \"setup\" };\n    }\n    case \"READY-PLAYER\": {\n      const playerID = action.playerID;\n      const player = state.players[playerID];\n      let returnState = {\n        ...state,\n        players: {\n          ...state.players,\n          [playerID]: { ...player, shipsPlaced: true },\n        },\n      };\n      // check if all players have placed ships. change mode if they have\n      if (\n        returnState.playerList.every((player) => {\n          return returnState.players[player].shipsPlaced === true;\n        })\n      ) {\n        returnState = { ...returnState, gameMode: \"play\" };\n      }\n      console.log(\"old state\", state);\n      console.log(\"updated state:\", returnState);\n      return returnState;\n    }\n\n    case \"CLEAR-BOARD\": {\n      const playerID = action.playerID;\n      const newBoard = createBoard(state.boards.player_0.length);\n      const newShips = state.ships[playerID].map((ship) => ({\n        ...ship,\n        placed: false,\n      }));\n      return {\n        ...state,\n        boards: { ...state.boards, [playerID]: newBoard },\n        ships: { ...state.ships, [playerID]: newShips },\n      };\n    }\n\n    case \"PLACE-SHIP\": {\n      const playerID = action.playerID;\n      const board = state.boards[playerID];\n      const { y, x, ship, horizontal } = action.payload;\n      const ships = state.ships[playerID];\n      const newBoard = placeShipOnBoard(board, y, x, ship, horizontal);\n      const newShips = setShipPlacedInFleet(ships, ship);\n      return {\n        ...state,\n        boards: { ...state.boards, [playerID]: newBoard },\n        ships: { ...state.ships, [playerID]: newShips },\n      };\n    }\n    case \"REMOVE-SHIP\": {\n      console.log(\"removing\");\n      const playerID = action.playerID;\n      const shipToRemove = action.payload;\n      const board = state.boards[playerID];\n      const ships = state.ships[playerID];\n      const newBoard = removeShipFromBoard(board, shipToRemove);\n      const newShips = unplaceShip(ships, shipToRemove);\n      return {\n        ...state,\n        boards: { ...state.boards, [playerID]: newBoard },\n        ships: { ...state.ships, [playerID]: newShips },\n      };\n    }\n    case \"RANDOM-PLACE-ONE\": {\n      const playerID = action.playerID;\n      const ship = action.payload;\n      const ships = [...state.ships[playerID]];\n      const board = [...state.boards[playerID]];\n      const { coords, horizontal } = getAIPlaceShipCoords(board, ship);\n      const [y, x] = coords;\n      const newBoard = placeShipOnBoard(board, y, x, ship, horizontal);\n      const newShips = setShipPlacedInFleet(ships, ship);\n\n      return {\n        ...state,\n        boards: { ...state.boards, [playerID]: newBoard },\n        ships: { ...state.ships, [playerID]: newShips },\n      };\n    }\n    case \"RANDOM-PLACE-ALL\": {\n      // recieves action.playerIndex\n      console.log(\"random place\");\n      const playerID = action.playerID;\n      const ships = state.ships[playerID];\n      // start with clear board\n      let newBoard = createBoard(state.boards.player_0.length);\n      let newShips = [...ships];\n      // get coords for each ship\n      state.ships[playerID].forEach((ship) => {\n        // get valid coordinates for ship\n        const { coords, horizontal } = getAIPlaceShipCoords(newBoard, ship);\n        // get y and x for readability\n        const [y, x] = coords;\n        newBoard = placeShipOnBoard(newBoard, y, x, ship, horizontal);\n        newShips = setShipPlacedInFleet(newShips, ship);\n      });\n      // update newPlayers\n      return {\n        ...state,\n        boards: { ...state.boards, [playerID]: newBoard },\n        ships: { ...state.ships, [playerID]: newShips },\n      };\n    }\n    case \"ATTACK\": {\n      // handles attacking coords, and sets the next turn\n      // recieve action.playerIndex, action.payload([coords])\n      const playerID = action.playerID;\n      const [y, x] = action.payload;\n      const board = state.boards[playerID];\n      let ships = [...state.ships[playerID]];\n      const cell = board[y][x];\n      // mark cell as attacked\n      const newBoard = attackCellOnBoard(board, y, x);\n\n      const shootingPlayer = state.players[state.playerList[state.turnIndex]];\n      console.log(\"shooting player\", shootingPlayer);\n      let hits = shootingPlayer.hits;\n\n      // if cell has ship...\n      if (cell.ship) {\n        // mark ship hit\n        ships = attackShipInfleet(ships, cell.ship);\n        // add hit to player who shot\n        hits += 1;\n      }\n      // Add shot to player who made attack!!!\n      return {\n        ...state,\n        players: {\n          ...state.players,\n          [state.playerList[state.turnIndex]]: {\n            ...shootingPlayer,\n            shots: shootingPlayer.shots + 1,\n            hits: hits,\n          },\n        },\n        lastAttackedPlayer: playerID,\n        boards: { ...state.boards, [playerID]: newBoard },\n        ships: { ...state.ships, [playerID]: ships },\n        allowAttack: false,\n      };\n    }\n    case \"SET-NEXT-TURN\": {\n      // check if the player just attacked was eliminated, remove them if so\n      let playersInGame = [...state.playerList];\n      let playersOutOfGame = [...state.playersOutOfGame];\n      if (state.lastAttackedPlayer) {\n        if (checkIfPlayerOutOfGame(state.ships[state.lastAttackedPlayer])) {\n          const playerEliminated = state.lastAttackedPlayer;\n          playersOutOfGame = [...playersOutOfGame, playerEliminated];\n          playersInGame = state.playerList.filter(\n            (player) => player !== playerEliminated\n          );\n        }\n      }\n      // set game over if there is only 1 player left. return here to avoid extra work\n\n      if (checkIfGameOver(playersInGame)) {\n        console.log(\"Game is over\");\n        return {\n          ...state,\n          gameOver: true,\n          playerList: playersInGame,\n          turnIndex: 0,\n          playersOutOfGame: playersOutOfGame,\n          allowAttack: false,\n          gameMode: \"over\",\n        };\n      }\n\n      // set if the player is ready ONLY if they are AI or there is only 1 human player\n\n      const nextTurn = handleTurns(playersInGame.length, state.turnIndex);\n      let humanPlayers = state.playerList.filter(\n        (player) => state.players[player].ai === false\n      );\n      let playerIsReady =\n        humanPlayers.length < 2 || state.players[state.playerList[nextTurn]].ai\n          ? true\n          : false;\n      return {\n        ...state,\n        playerList: playersInGame,\n        playersOutOfGame: playersOutOfGame,\n        turnIndex: nextTurn,\n        allowAttack: true,\n        currentTurnPlayerIsReady: playerIsReady,\n      };\n    }\n    case \"SET-TURN-READY\": {\n      return { ...state, currentTurnPlayerIsReady: true };\n    }\n    case \"SET-MODE\": {\n      return { ...state, gameMode: action.payload };\n    }\n\n    default:\n      return {};\n  }\n};\n\nexport const defaultInitialState = {\n  numberOfPlayers: 2,\n  numberOfAI: 1,\n  boardWidth: 10,\n  shipArray: defaultShipArray,\n};\nexport const createInitialState = (\n  { numberOfPlayers, numberOfAI, boardWidth, shipArray },\n  initializeWithMode = \"init\"\n) => {\n  // instantiate players\n  const players = {};\n  // array for iteration\n  const playerList = [];\n  for (let i = 0; i < numberOfPlayers; i++) {\n    if (i < numberOfPlayers - numberOfAI) {\n      // create Human players\n      players[`player_${i}`] = createPlayer(false, i);\n      // create AI players\n    } else {\n      players[`player_${i}`] = createPlayer(true, i);\n    }\n    playerList.push(`player_${i}`);\n  }\n  // instantiate boards\n  const boards = {};\n  playerList.forEach((player) => {\n    boards[player] = createBoard(boardWidth);\n  });\n  // instantiate ships\n  const ships = {};\n  playerList.forEach((player) => {\n    ships[player] = createFleet(shipArray);\n  });\n  // turnIndex. start at first player\n  const turnIndex = 0;\n  //gameover\n  const gameOver = false;\n  // SETUP AI BOARDS\n  const aiList = playerList.filter((player) => players[player].ai === true);\n  if (aiList.length > 0) {\n    // randomize each board\n    aiList.forEach((aiPlayer) => {\n      let aiPlayerShips = ships[aiPlayer];\n      let aiPlayerBoard = boards[aiPlayer];\n      players[aiPlayer].shipsPlaced = true;\n      aiPlayerShips.forEach((ship) => {\n        // marks all ships placed as true.\n        // this is done by ref, so you shouldn't need to assign again\n        ship.placed = true;\n        const { coords, horizontal } = getAIPlaceShipCoords(\n          aiPlayerBoard,\n          ship\n        );\n        // get y and x for readability\n        const [y, x] = coords;\n        aiPlayerBoard = placeShipOnBoard(aiPlayerBoard, y, x, ship, horizontal);\n        boards[aiPlayer] = aiPlayerBoard;\n      });\n    });\n  }\n\n  // modes [init,setup,play,over]\n\n  /////////////CHANGE ME\n  const gameMode = initializeWithMode;\n  ////////////////////////////////////////////////\n\n  const playersOutOfGame = [];\n  return {\n    players,\n    ships,\n    boards,\n    playerList,\n    turnIndex,\n    gameOver,\n    gameMode,\n    playersOutOfGame,\n    allowAttack: true,\n    currentTurnPlayerIsReady: false,\n  };\n};\n","import styled, { createGlobalStyle } from \"styled-components\";\n\n//colors:\nexport const colors = {\n  bg_gray: \"#303030\",\n  bg_gray2: \"#3b3b3b\",\n  invalid: \"#b8022c\",\n  openWater: \"#8787d6\",\n  main: {\n    100: \"#000031\",\n    90: \"#0e1f4c\",\n    50: \"#696EA5\",\n    10: \"#B4B7F3\",\n  },\n\n  contrast: {\n    100: \"#663268\",\n    90: \"#B14a6e\",\n    50: \"#e87664\",\n    40: \"#FFB35B\",\n    20: \"#F9F871\",\n  },\n};\n\nexport const GlobalStyle = createGlobalStyle`\n    *{\n        box-sizing: border-box;\n    }\n    html{\n        background: ${colors.bg_gray};\n    }\n    body{\n        padding-bottom: 50px;\n    }\n    h1,h2,h3,h4,h5,p,button,span{\n        font-family: \"Lexend\", sans-serif;\n    }\n    div,h1,h2,h3,h4,h5,p,h6,button{\n        margin: 0;\n    }\n    header{\n        color: ${colors.contrast[40]};\n        padding: 2em;\n        background: ${colors.bg_gray};\n        margin-bottom: 2em;\n        h1{\n            padding: 0 1em;\n            margin: 0 auto;\n            max-width: 1200px;\n        }\n    }\n    .contentContainer{\n        position: relative;\n        margin: 0 auto;\n        width: 90%;\n        max-width: 1200px;\n        display: flex;\n        justify-content: center;\n        align-items: flex-start; \n\n        @media only screen and (max-width:635px){\n            flex-direction: column;\n            align-items: center;\n            \n        }\n    }\n    .boards{\n        flex-grow: 1;\n        display:flex;\n        flex-wrap: wrap;\n        justify-content: center;\n        gap: .5rem;\n        .ai{\n            align-items: flex-start;\n        }\n    }\n`;\n\nexport const CellWrapper = styled.div`\n  width: 100%;\n  border: 1px solid black;\n  padding-bottom: 100%;\n`;\nexport const PlayCell = styled(CellWrapper)`\n  background-color: ${({ cell, showShip }) =>\n    showShip\n      ? cell.ship\n        ? cell.attacked\n          ? colors.invalid\n          : colors.bg_gray\n        : cell.attacked\n        ? colors.openWater\n        : colors.main[90]\n      : cell.attacked\n      ? cell.ship\n        ? colors.invalid\n        : colors.openWater\n      : colors.main[90]};\n`;\nexport const StyledPlacementCell = styled(CellWrapper)`\n  background: ${({ bg_color }) => {\n    switch (bg_color) {\n      case \"ship\":\n        return \"gray\";\n      case \"empty\":\n        return colors.main[90];\n      case \"invalid\":\n        return colors.invalid;\n      case \"valid\":\n        return colors.contrast[90];\n      default:\n        return colors.main[90];\n    }\n  }};\n`;\nexport const BoardWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${({ boardWidth }) => boardWidth}, 1fr);\n  max-width: ${({ statBoard, over }) =>\n    statBoard && !over ? \"200px\" : \"400px\"};\n  min-width: ${({ statBoard, over }) =>\n    statBoard && !over ? \"100px\" : \"250px\"};\n  flex-grow: 1;\n\n  &::after {\n    padding-bottom: 100%;\n  }\n`;\nexport const GameWrapper = styled.div``;\nexport const MessageWrapper = styled.div`\n  text-align: center;\n  background-color: grey;\n`;\nexport const Text = styled.p``;\n\nexport const ShipSelectionWrapper = styled.div`\n  width: 25%;\n`;\nexport const ShipModelWrapper = styled.div`\n  display: flex;\n`;\nexport const ShipOrientationWrapper = styled.div`\n  transform: ${({ horizontalPlacement }) =>\n    horizontalPlacement ? \"rotateZ(90deg)\" : \"rotateZ(0)\"};\n  transition: transform 0.25s linear;\n  margin-top: auto;\n  margin-bottom: auto;\n`;\nexport const OrientationFrame = styled.div`\n  padding: 1rem 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n  #rotateButton {\n    color: ${colors.contrast[40]};\n  }\n  &:hover {\n    #rotateButton {\n      color: ${colors.contrast[50]};\n    }\n  }\n`;\nexport const ShipCell = styled.div`\n  background-color: grey;\n  width: 5px;\n  height: 5px;\n`;\nexport const ShipCellLG = styled.div`\n  background-color: grey;\n  width: 10px;\n  height: 10px;\n`;\nexport const ShipWrapper = styled.li`\n  flex-grow: 1;\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n  gap: 5%;\n  border: 0.02em solid black;\n  padding: 0.25rem 1rem;\n  cursor: pointer;\n  color: ${colors.contrast[40]};\n  background-color: ${({ hasBeenPlaced, isCurrentShip, ship, play }) => {\n    if (play) {\n      if (ship.sunk) {\n        return colors.invalid;\n      }\n      if (ship.hits > 0) {\n        return colors.contrast[90];\n      }\n      return colors.main[90];\n    }\n    return hasBeenPlaced\n      ? colors.contrast[100]\n      : isCurrentShip\n      ? colors.contrast[90]\n      : colors.main[90];\n  }};\n  &:hover {\n    filter: brightness(125%);\n  }\n  &:nth-child(even) {\n    background-color: ${({ hasBeenPlaced, isCurrentShip, ship, play }) => {\n      if (play) {\n        if (ship.sunk) {\n          return colors.invalid;\n        }\n        if (ship.hits > 0) {\n          return colors.contrast[90];\n        }\n        return colors.main[100];\n      }\n      return hasBeenPlaced\n        ? colors.contrast[100]\n        : isCurrentShip\n        ? colors.contrast[90]\n        : colors.main[100];\n    }};\n  }\n`;\nexport const ShipInfo = styled.div`\n  cursor: pointer;\n  display: flex;\n  margin: 2px;\n  flex-direction: column;\n  align-items: center;\n  background-color: ${({ allPlayersPlaced, currentSelection }) =>\n    !allPlayersPlaced\n      ? \"cadetblue\"\n      : currentSelection\n      ? \"orange\"\n      : \"whitesmoke\"};\n  &:hover {\n    background-color: ${({ allPLayersPlaced, currentSelection }) =>\n      currentSelection ? null : !allPLayersPlaced ? null : \"ghostwhite\"};\n  }\n`;\n\nexport const Sidebar = styled.div`\n  z-index: 100;\n  flex-grow: 1;\n  max-width: 400px;\n  min-width: 200px;\n  width: 15%;\n  position: sticky;\n  top: 0.5rem;\n  background-color: ${colors.bg_gray2};\n  padding: 1rem;\n  margin-bottom: 1rem;\n\n  ul {\n    padding: 0;\n    max-width: 50%;\n    min-width: 111px;\n  }\n  .playerInfo {\n    flex-direction: column;\n    display: flex;\n    justify-content: flex-start;\n    gap: 3rem;\n  }\n  .buttons {\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n    justify-content: center;\n  }\n  header {\n    background: ${colors.main[100]};\n    color: ${colors.contrast[40]};\n    padding: 1rem;\n    margin: 0.25rem;\n    display: flex;\n    align-items: baseline;\n    justify-content: center;\n  }\n  .currentPlayerTurn {\n    font-weight: bold;\n  }\n  .content {\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  .list {\n    width: 50%;\n  }\n  .collapseRow {\n    display: flex;\n    flex-grow: 1;\n    min-width: 170px;\n    width: 100%;\n  }\n  @media only screen and (max-width: 635px) {\n    width: 100%;\n    .buttons {\n      flex-direction: row;\n    }\n    .collapseRow {\n    }\n    .content {\n      flex-direction: column;\n      flex-wrap: nowrap;\n    }\n    .playerInfo {\n      flex-direction: row;\n      flex-wrap: wrap;\n      justify-content: center;\n      gap: 0.5rem;\n    }\n  }\n`;\nexport const PlacementWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n`;\nexport const ShipName = styled.h4`\n  text-transform: uppercase;\n  font-size: 0.6rem;\n  font-weight: bold;\n  display: inline;\n`;\nexport const BoardLabel = styled.label`\n  color: ${colors.contrast[40]};\n  font-weight: bold;\n  background: ${colors.main[100]};\n  writing-mode: vertical-lr;\n  transform: rotate(180deg);\n  text-align: center;\n  padding: 0.25rem;\n`;\nexport const BoardAndLabelWrapper = styled.div`\n  flex-grow: 1;\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  gap: 0.25em;\n  animation: ${({ isVisible }) =>\n    isVisible ? \"fade-in 0.05s ease-in\" : \"fade-in 0.05s ease-out reverse\"};\n  @keyframes fade-in {\n    0% {\n      opacity: 0;\n    }\n    100% {\n      opacity: 1;\n    }\n  }\n`;\nexport const MessageBox = styled.ul`\n  position: sticky;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: flex-end;\n  bottom: 10px;\n  width: 90%;\n  margin: 0 auto;\n  max-width: 900px;\n  z-index: 901;\n  list-style: none;\n`;\nexport const AlertMessage = styled.li`\n  list-style: none;\n  color: ${colors.contrast[40]};\n  background: ${({ type }) =>\n    type === \"HIT\"\n      ? colors.invalid\n      : type === \"MISS\"\n      ? colors.main[50]\n      : \"green\"};\n  padding: 0.5em 1em;\n  span {\n    margin-left: 2em;\n  }\n  animation: fader 0.5s ease-in;\n  &:nth-child(even) {\n    filter: brightness(0.9);\n  }\n  @keyframes fader {\n    0% {\n      opacity: 0;\n    }\n    100% {\n      opacity: 1;\n    }\n  }\n`;\nexport const RotateButton = styled.div``;\n\nexport const Button = styled.button`\n  color: ${colors.contrast[40]};\n  font-weight: bold;\n  font-size: 0.75rem;\n  background: ${colors.main[90]};\n  padding: 0.5rem;\n  border-radius: 3px;\n  border: none;\n  margin: 0.25rem;\n  &:hover {\n    background: ${colors.main[100]};\n  }\n  span {\n    text-align: center;\n  }\n`;\n\nexport const SidebarMessage = styled.div`\n  background: ${colors.main[100]};\n  margin: 0;\n  padding: 1rem;\n`;\n\nexport const SidebarMessageText = styled.h4`\n  color: ${colors.contrast[40]};\n  opacity: ${({ fadeIn }) => (fadeIn ? 1 : 0)};\n  transition: opacity 0.3s ease-out;\n`;\nexport const ReadyPlayerPrompt = styled.div`\n  background: ${colors.bg_gray2};\n  padding: 2rem;\n  text-align: center;\n  p {\n    font-size: 1.5rem;\n    color: ${colors.contrast[40]};\n    padding: 2rem;\n  }\n`;\nexport const Card = styled.div`\n  color: ${colors.contrast[40]};\n  background: ${colors.bg_gray2};\n  padding: 2rem;\n  border-radius: 5px;\n  box-shadow: 0px 10px 10px rgba(0, 0, 0, 0.2);\n  max-width: 100%;\n  @media only screen and (max-width: 400px) {\n    padding: 0;\n    width: 100%;\n  }\n  ul {\n    padding-inline-start: 0;\n    @media only screen and (max-width: 400px) {\n      padding: 0;\n      width: 100%;\n    }\n  }\n  input {\n    text-align: right;\n    border: 1px solid ${colors.contrast[40]};\n    font-weight: bold;\n    font-size: 1rem;\n    border-radius: 5px;\n    background: ${colors.bg_gray};\n    padding: 0.5rem;\n    color: ${colors.contrast[40]};\n    @media only screen and (max-width: 400px) {\n      width: 100%;\n    }\n  }\n  header {\n    text-align: center;\n  }\n  .content {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    justify-content: center;\n    width: 100%;\n    @media only screen and (min-width: 400px) {\n      flex-direction: row;\n    }\n    li {\n      display: flex;\n      background: ${colors.main[100]};\n      @media only screen and (max-width: 400px) {\n        text-align: center;\n        width: 100%;\n        flex-direction: column;\n      }\n      &:nth-child(odd) {\n        background: ${colors.main[90]};\n      }\n    }\n  }\n  .initForm {\n    list-style: none;\n    .initInput {\n      display: flex;\n      justify-content: flex-end;\n      gap: 1rem;\n      align-items: center;\n      padding: 1rem;\n    }\n  }\n\n  .stats {\n    list-style: none;\n    li {\n      margin: 0;\n      display: flex;\n      gap: 0.5rem;\n      color: ${colors.contrast[40]};\n      padding: 1rem;\n      background: ${colors.main[100]};\n      &:nth-child(even) {\n        background: ${colors.main[90]};\n      }\n    }\n  }\n  .controls {\n    margin-top: 1rem;\n    text-align: center;\n  }\n`;\n\nexport const PlayerNameForm = styled.form`\n  ul {\n    list-style: none;\n    padding: 2rem;\n    li {\n      background: ${colors.main[100]};\n      color: ${colors.contrast[40]};\n      font-weight: bold;\n      display: flex;\n      justify-content: space-around;\n      padding: 1rem;\n      gap: 2rem;\n      &:nth-child(even) {\n        background: ${colors.main[90]};\n      }\n    }\n  }\n`;\nexport const FadeWrapper = styled.div`\n  //inherit a whole bunch of stuff to make the wrapper not affect layout\n  width: 100%;\n  display: inherit;\n  flex-direction: inherit;\n  flex-wrap: inherit;\n  justify-content: inherit;\n  align-items: inherit;\n\n  opacity: ${({ isOpaque }) => (isOpaque ? 1 : 0)};\n  transition: ${({ fadeTime }) => `opacity ${fadeTime}ms ease-in`};\n`;\n","import { ReadyPlayerPrompt, Button } from \"./styles/components\";\n\nexport const ReadyPrompt = ({ playerName, playerID, setPlayerReady }) => {\n  return (\n    <ReadyPlayerPrompt>\n      <p>{playerName}, are you ready?</p>\n      <Button\n        onClick={() => {\n          setPlayerReady(playerID);\n        }}>\n        OK\n      </Button>\n    </ReadyPlayerPrompt>\n  );\n};\n","import {\n  ShipWrapper,\n  ShipName,\n  ShipModelWrapper,\n  ShipCell,\n} from \"./styles/components\";\nimport { useContext } from \"react\";\nimport { GameContext } from \"./Game\";\n\nconst createShipModel = (length) => {\n  return (\n    // {Array(length).fill(<ShipCell />)\n    <ShipModelWrapper>\n      {Array.from({ length }, (_, index) => (\n        <ShipCell key={`shipCell_${index}`} />\n      ))}\n    </ShipModelWrapper>\n  );\n};\n\nexport const ShipStats = ({\n  ship,\n  selectShipToPlaceOrReplace,\n  shipIndex,\n  indexOfShipToPlace,\n  clickable,\n  placement,\n}) => {\n  const { players, playerList } = useContext(GameContext);\n  const allPlayersPlaced = playerList.every(\n    (player) => players[player].shipsPlaced === true\n  );\n  return (\n    <ShipWrapper\n      play={!placement}\n      allPlayersPlaced={allPlayersPlaced}\n      ship={ship}\n      hasBeenPlaced={ship.placed}\n      isCurrentShip={shipIndex === indexOfShipToPlace}\n      onClick={() =>\n        clickable ? selectShipToPlaceOrReplace(shipIndex) : null\n      }>\n      <ShipName>{ship.name}</ShipName>\n      {createShipModel(ship.length)}\n    </ShipWrapper>\n  );\n};\n","import { ShipStats } from \"./ShipStats\";\n\nexport const ShipList = ({\n  ships,\n  selectShipToPlaceOrReplace,\n  indexOfShipToPlace,\n  clickable,\n  placement,\n}) => {\n  const createShipList = (shipList) => {\n    return shipList.map((ship, shipIndex) => (\n      <ShipStats\n        placement={placement}\n        clickable={clickable}\n        key={`ship_list_${shipIndex}`}\n        shipIndex={shipIndex}\n        ship={ship}\n        selectShipToPlaceOrReplace={selectShipToPlaceOrReplace}\n        indexOfShipToPlace={indexOfShipToPlace}\n      />\n    ));\n  };\n  return <ul>{createShipList(ships)}</ul>;\n};\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSync } from \"@fortawesome/free-solid-svg-icons\";\nimport {\n    ShipCellLG,\n    ShipOrientationWrapper,\n    OrientationFrame,\n} from \"./styles/components\";\nexport const Orientation = ({\n    ship,\n    horizontalPlacement,\n    toggleHorizontal,\n}) => {\n    return (\n        <OrientationFrame onClick={toggleHorizontal}>\n            <ShipOrientationWrapper horizontalPlacement={horizontalPlacement}>\n                {/* {Array(ship.length).fill(<ShipCellLG />)} */}\n                {Array.from({length:ship.length},(_,index)=> <ShipCellLG key={`orientation_${index}`}/>)}\n            </ShipOrientationWrapper>\n            <FontAwesomeIcon id=\"rotateButton\" icon={faSync} />\n        </OrientationFrame>\n    );\n};\n","import { useContext } from \"react\";\nimport { ShipList } from \"./ShipList\";\nimport { Orientation } from \"./Orientation\";\nimport { Button } from \"./styles/components\";\nimport { GameDispatch } from \"./Game\";\n\nexport const ShipPlacementList = ({\n  shipsToPlace,\n  toggleHorizontal,\n  horizontalPlacement,\n  playerToPlace,\n  shouldPromptPlayerOk,\n  confirmPlayerReady,\n  selectShipToPlaceOrReplace,\n  indexOfShipToPlace,\n  initMessage,\n  resetMessage,\n}) => {\n  const dispatch = useContext(GameDispatch);\n  return (\n    <>\n      <div className=\"collapseRow\">\n        <ShipList\n          placement\n          clickable\n          indexOfShipToPlace={indexOfShipToPlace}\n          ships={shipsToPlace}\n          selectShipToPlaceOrReplace={selectShipToPlaceOrReplace}\n        />\n        <Orientation\n          toggleHorizontal={toggleHorizontal}\n          ship={shipsToPlace[indexOfShipToPlace]}\n          horizontalPlacement={horizontalPlacement}\n        />\n      </div>\n      <div className=\"buttons\">\n        {!shouldPromptPlayerOk ? (\n          <>\n            <Button\n              onClick={() => {\n                dispatch({\n                  type: \"RANDOM-PLACE-ONE\",\n                  playerID: playerToPlace,\n                  payload: shipsToPlace[indexOfShipToPlace],\n                });\n              }}>\n              <span>Randomize Ship</span>\n            </Button>\n            <Button>\n              <span\n                onClick={() => {\n                  dispatch({\n                    type: \"RANDOM-PLACE-ALL\",\n                    playerID: playerToPlace,\n                  });\n                }}>\n                Randomize Fleet\n              </span>\n            </Button>\n          </>\n        ) : (\n          <>\n            <Button\n              onClick={() => {\n                // this timeout is to accomodate the fade out of this component.\n                setTimeout(() => {\n                  confirmPlayerReady(playerToPlace);\n                }, 500);\n              }}>\n              Ok?\n            </Button>\n            <Button\n              onClick={() => {\n                resetMessage(initMessage());\n                dispatch({\n                  type: \"CLEAR-BOARD\",\n                  playerID: playerToPlace,\n                });\n              }}>\n              Reset\n            </Button>\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n","import { useContext } from \"react\";\nimport { StyledPlacementCell } from \"./styles/components.js\";\nimport { GameDispatch } from \"./Game\";\n\nexport const PlacementCell = ({\n  cell,\n  setPointer,\n  getSelectionInformation,\n  board,\n  playerID,\n  currentShip,\n  horizontalPlacement,\n}) => {\n  const { x, y, ship } = cell;\n  const dispatch = useContext(GameDispatch);\n\n  const handleHover = () => {\n    setPointer(y, x);\n  };\n  // return how the cell should appear when rendered\n  const checkIfValid = () => {\n    let currentSelection = getSelectionInformation();\n    if (!currentSelection.valid) return false;\n    //check if there is a ship in current selection\n    if (\n      currentSelection.cells.some((coords) => {\n        // return false if any cell has a ship\n        return board[coords[0]][coords[1]].ship !== false;\n      })\n    ) {\n      return false;\n    }\n    return true;\n  };\n  const testRenderStyle = () => {\n    if (ship) return \"ship\";\n    let currentSelection = getSelectionInformation();\n    // check if cell is in range. render appropriately\n    if (\n      currentSelection.cells.some(\n        (coords) => coords[0] === y && coords[1] === x\n      )\n    ) {\n      // check if selection has any out of bounds\n      //check if there is a ship in current selection\n      if (currentShip.placed) return;\n      return checkIfValid() ? \"valid\" : \"invalid\";\n    }\n    // if cell doesn't have ship and isnt in selection\n    return \"empty\";\n  };\n  const handlePlacement = () => {\n    if (!checkIfValid()) return;\n    if (currentShip.placed) return;\n\n    dispatch({\n      type: \"PLACE-SHIP\",\n      playerID: playerID,\n      payload: {\n        x: x,\n        y: y,\n        ship: currentShip,\n        horizontal: horizontalPlacement,\n      },\n    });\n  };\n\n  return (\n    <>\n      <StyledPlacementCell\n        bg_color={testRenderStyle()}\n        onMouseEnter={handleHover}\n        onClick={handlePlacement}\n      />\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { checkIfRangeIsInBounds } from \"./game/board\";\n\nexport const usePointer = (board, horizontalPlacement, currentShip) => {\n    const [currentPointer, setCurrentPointer] = useState({\n        x: false,\n        y: false,\n    });\n\n    const setPointer = (y, x) => {\n        setCurrentPointer({ ...currentPointer, y, x });\n    };\n    const setNoPointer = () => {\n        setCurrentPointer({ x: false, y: false });\n    };\n    const createArrayFromPointer = (y, x, ship) => {\n        if (ship && x !== false && y !== false) {\n            let startIndex = horizontalPlacement ? x : y;\n            const coordsList = [];\n            for (let i = 0; i < ship.length; i++) {\n                if (horizontalPlacement) {\n                    coordsList.push([y, startIndex]);\n                } else {\n                    coordsList.push([startIndex, x]);\n                }\n                startIndex += 1;\n            }\n            return coordsList;\n        }\n        return [];\n    };\n    const testIfSelectionInBounds = (board, ship) => {\n        return checkIfRangeIsInBounds(\n            board,\n            currentPointer.y,\n            currentPointer.x,\n            ship.length,\n            horizontalPlacement\n        );\n    };\n\n    // this will return an object of {valid,cells}, where valid is if the current selection is in range, and the range of cells affected.It is a helper function. Maybe it should be moved out of usePointer??\n\n    // only handles if selectin is out of bounds. DOES NOT HANDLE if there is a ship present in the range of cells. That is handled by the cell itslef\n    const getCurrentSelection = () => {\n        let currentCells = createArrayFromPointer(\n            currentPointer.y,\n            currentPointer.x,\n            currentShip\n        );\n        // check if selection is in bounds\n        let inBounds = testIfSelectionInBounds(board, currentShip);\n\n        return { cells: currentCells, valid: inBounds };\n    };\n    return {\n        currentPointer,\n        setPointer,\n        setNoPointer,\n        getCurrentSelection,\n    };\n};\n","import { BoardWrapper } from \"./styles/components\";\nimport { PlacementCell } from \"./PlacementCell\";\nimport { usePointer } from \"./pointer\";\n\nexport const PlacementBoard = ({\n  board,\n  currentShip,\n  horizontalPlacement,\n  playerID,\n  handlePlaceShip,\n}) => {\n  const pointer = usePointer(board, horizontalPlacement, currentShip);\n\n  const createCells = (board) => {\n    return board.map((row, y) =>\n      row.map((cell, x) => {\n        return (\n          <PlacementCell\n            key={`placement ${y},${x}`}\n            horizontalPlacement={horizontalPlacement}\n            currentShip={currentShip}\n            playerID={playerID}\n            board={board}\n            cell={cell}\n            setPointer={pointer.setPointer}\n            getSelectionInformation={\n              pointer.getCurrentSelection\n            }></PlacementCell>\n        );\n      })\n    );\n  };\n  return (\n    <BoardWrapper boardWidth={board.length} onMouseLeave={pointer.setNoPointer}>\n      {createCells(board)}\n    </BoardWrapper>\n  );\n};\n","import { useState, useContext, useEffect, useCallback } from \"react\";\nimport {\n  Sidebar,\n  SidebarMessage,\n  SidebarMessageText,\n} from \"./styles/components\";\nimport { ShipPlacementList } from \"./ShipPlacementList\";\nimport { PlacementBoard } from \"./PlacementBoard\";\nimport { GameContext, GameDispatch } from \"./Game\";\n\nexport const Placement = () => {\n  const [horizontalPlacement, setHorizontalPlacement] = useState(false);\n  const { boards, ships, playerList, players, gameMode } = useContext(\n    GameContext\n  );\n  const [playerToPlace, setPlayerToPlace] = useState({\n    index: 0,\n    id: \"player_0\",\n    name: players[playerList[0]].name,\n  });\n  const dispatch = useContext(GameDispatch);\n  // select player to place\n  const [indexOfShipToPlace, setIndexOfShipToPlace] = useState(0);\n  const [shouldPromptPlayerOk, setShouldPromptPlayerOk] = useState(false);\n  const [fadeInText, setFadeInText] = useState(false);\n  const initMessageText = () => {\n    return `${playerToPlace.name}, place your ships.`;\n  };\n  const [sideBarMessage, setSideBarMessage] = useState(initMessageText);\n\n  const fadeOutInText = useCallback((newText) => {\n    setFadeInText(false);\n    return setTimeout(() => {\n      // return a timeout ID to clear timeout\n      setSideBarMessage(newText);\n      setFadeInText(true);\n    }, 300);\n  }, []);\n\n  //update message any time player changes\n  useEffect(() => {\n    if (!playerToPlace) return;\n    const timeoutID = fadeOutInText(`${playerToPlace.name}, place your ships.`);\n    return () => clearTimeout(timeoutID); // this will clear the timeout if the component is unmounted before it is called.\n  }, [playerToPlace, fadeOutInText]);\n\n  const selectIndexOfShip = (index) => {\n    setIndexOfShipToPlace(index);\n    //if the ship is placed already- unplace it\n    if (ships[playerToPlace.id][index].placed) {\n      if (sideBarMessage === \"Ready?\") fadeOutInText(initMessageText());\n      dispatch({\n        type: \"REMOVE-SHIP\",\n        playerID: playerToPlace.id,\n        payload: ships[playerToPlace.id][index],\n      });\n    }\n  };\n\n  // check if all ships are placed to toggle player prompt\n  useEffect(() => {\n    // check if all ships are placed only if there is a player remaining\n    if (playerToPlace === false) return;\n    if (ships[playerToPlace.id].every((ship) => ship.placed === true)) {\n      // toggle player ok if they are\n      setShouldPromptPlayerOk(true);\n      fadeOutInText(\"Ready?\");\n    } else {\n      setShouldPromptPlayerOk(false);\n    }\n  }, [ships, playerToPlace, fadeOutInText]);\n\n  // change the index any time the current index has been placed\n  useEffect(() => {\n    if (!playerToPlace) return; // only run if there are still players to place\n    // only inc index if there are remaining ships and the current index has been placed\n    if (\n      ships[playerToPlace.id][indexOfShipToPlace].placed &&\n      ships[playerToPlace.id].some((ship) => ship.placed === false)\n    ) {\n      let resultFound = false;\n      let testIndex = indexOfShipToPlace + 1;\n      if (testIndex >= ships[playerToPlace.id].length) testIndex = 0;\n      while (!resultFound) {\n        if (ships[playerToPlace.id][testIndex].placed) {\n          testIndex += 1;\n        } else {\n          resultFound = true;\n        }\n      }\n      setIndexOfShipToPlace(testIndex);\n    }\n  }, [ships, playerToPlace, indexOfShipToPlace]);\n\n  const toggleHorizontal = () => {\n    setHorizontalPlacement((h) => !h);\n  };\n\n  const confirmPlayerReady = (playerID) => {\n    //remove 'OK' prompt\n\n    dispatch({ type: \"READY-PLAYER\", playerID: playerID });\n    // reset ship placement index to 0 for next player\n    // set next player to place\n    // check if next player is 1: a player 2: isnt AI, 3: isn't fully placed\n    let nextIndex = playerToPlace.index + 1;\n    let numberOfHumanPlayers = playerList.filter(\n      (player) => players[player].ai === false\n    ).length;\n    //////This was removed because it will interfere with fade. Refactored below.\n    // if there are no more human players, set playerToPlace to false\n    // if (nextIndex >= numberOfHumanPlayers) {\n    //   setPlayerToPlace(false);\n    //   return;\n    // }\n    ////////////////REFACTOR\n    // only advance player to place if there are players left to place\n\n    if (nextIndex < numberOfHumanPlayers) {\n      // change prompt for next player\n      setShouldPromptPlayerOk(false);\n      setIndexOfShipToPlace(0);\n      fadeOutInText(initMessageText());\n      let nextPlayer = players[playerList[nextIndex]];\n      let nextPlayerID = playerList[nextIndex];\n      setPlayerToPlace({\n        index: nextIndex,\n        name: nextPlayer.name,\n        id: nextPlayerID,\n      });\n    } //set the next player to next player;\n  };\n  return !playerToPlace ? null : (\n    <>\n      <Sidebar>\n        <SidebarMessage>\n          <SidebarMessageText fadeIn={fadeInText}>\n            {sideBarMessage}\n          </SidebarMessageText>\n        </SidebarMessage>\n        <div className=\"content\">\n          <ShipPlacementList\n            horizontalPlacement={horizontalPlacement}\n            toggleHorizontal={toggleHorizontal}\n            shipsToPlace={ships[playerToPlace.id]}\n            playerToPlace={playerToPlace.id}\n            shouldPromptPlayerOk={shouldPromptPlayerOk}\n            confirmPlayerReady={confirmPlayerReady}\n            selectShipToPlaceOrReplace={selectIndexOfShip}\n            indexOfShipToPlace={indexOfShipToPlace}\n            resetMessage={fadeOutInText}\n            initMessage={initMessageText}\n          />\n        </div>\n      </Sidebar>\n      <div className=\"boards\">\n        {console.log(ships, playerToPlace, indexOfShipToPlace)}\n        {console.log(gameMode)}\n        <PlacementBoard\n          board={boards[playerToPlace.id]}\n          horizontalPlacement={horizontalPlacement}\n          currentShip={ships[playerToPlace.id][indexOfShipToPlace]}\n          playerID={playerToPlace.id}\n        />\n      </div>\n    </>\n  );\n};\n","import {\n  BoardAndLabelWrapper,\n  BoardLabel,\n  BoardWrapper,\n  PlayCell,\n} from \"./styles/components\";\nimport { useContext } from \"react\";\nimport { GameContext } from \"./Game\";\nimport { GameDispatch } from \"./Game\";\nimport { AlertContext } from \"./App\";\n\nexport const Board = ({ board, playerID, isAI, statBoard, over }) => {\n  const { players, turnIndex, playerList, allowAttack } = useContext(\n    GameContext\n  );\n  const dispatch = useContext(GameDispatch);\n  const addAlert = useContext(AlertContext);\n\n  const createCells = (board) => {\n    return board.map((row, y) => {\n      return row.map((cell, x) => {\n        // attack Handler defined here so it has access to x,y closure\n        const handleAttack = () => {\n          if (players[playerList[turnIndex]].ai) return; // don't allow click attack on AI turn\n          if (playerID === playerList[turnIndex]) return; //don't allow attacks on own board;\n          if (!allowAttack) return; // don't allow more than 1 attack per turn\n          if (cell.attacked) return; // don't do anything if its already been attacked\n          dispatch({\n            type: \"ATTACK\",\n            playerID: playerID,\n            payload: [y, x],\n          });\n          if (cell.ship) {\n            console.log(\"hit!\");\n            addAlert({ type: \"HIT\", message: \"HIT!\" });\n          } else {\n            addAlert({ type: \"MISS\", message: \"MISS!\" });\n          }\n          // set next turn after attack timeout\n          setTimeout(() => {\n            dispatch({ type: \"SET-NEXT-TURN\" });\n          }, 1500);\n        };\n        return (\n          <PlayCell\n            showShip={statBoard}\n            key={`cell_${playerID}_${y}-${x}`}\n            cell={cell}\n            onClick={handleAttack}\n          />\n        );\n      });\n    });\n  };\n  return (\n    <BoardAndLabelWrapper>\n      <BoardLabel>{players[playerID].name}</BoardLabel>\n      <BoardWrapper over={over} statBoard={statBoard} boardWidth={board.length}>\n        {createCells(board)}\n      </BoardWrapper>\n    </BoardAndLabelWrapper>\n  );\n};\n","import { Board } from \"./Board\";\n\nexport const createBoards = (\n  allBoards,\n  listOfPlayersToRender,\n  players,\n  turnIndex\n) => {\n  // playerList is ONLY players who should have boards rendered. Logic should happen in 'HumanTurn and AITurn'\n  return listOfPlayersToRender.map((player) => (\n    // <PlayerBoardWrapper key={`board_${player}`}>\n    <Board\n      key={`board_${player}`}\n      board={allBoards[player]}\n      playerID={player}\n      isAI={players[player].ai}\n    />\n  ));\n};\n","export const aiAttack = (aiID, playerList, boards) => {\n  // can't attack self\n  const possiblePlayersToAttack = playerList.filter(\n    (player) => player !== aiID\n  );\n  // select a random player to attack\n  const indexOfPlayerToAttack = Math.floor(\n    Math.random() * possiblePlayersToAttack.length\n  );\n  // assign ID of player to be attacked\n  const playerID = possiblePlayersToAttack[indexOfPlayerToAttack];\n  // get possible coords of board\n  const boardToAttack = boards[playerID];\n  // flatten array of all cells to make it easier to work with\n  const allCellsOnBoard = boardToAttack.reduce((acc, current) =>\n    acc.concat(current)\n  );\n  const allHitsOnBoard = allCellsOnBoard.filter(\n    (cell) => cell.attacked && cell.ship\n  );\n  /// this logic is written assuming that it is a level playing field.\n  /// ai attacks will not be based on any knowledge that player doesn't have\n  const testForAdjacentCoords = (board, coords) => {\n    const [y, x] = coords;\n    // get coords that are in range but adjacent\n    const adjacentCoords = [];\n    // there is probably a way to DRY this.\n    if (y + 1 < board.length) adjacentCoords.push([y + 1, x]);\n    if (y - 1 < board.length && y - 1 >= 0) adjacentCoords.push([y - 1, x]);\n    if (x + 1 < board.length) adjacentCoords.push([y, x + 1]);\n    if (x - 1 < board.length && x - 1 >= 0) adjacentCoords.push([y, x - 1]);\n    return adjacentCoords;\n  };\n  // get all cells adjacent to all hits on board that\n\n  let cellsNextToHits = allHitsOnBoard.map((cell) =>\n    testForAdjacentCoords(boardToAttack, [cell.y, cell.x])\n  );\n  //flatten cells Next to HIts\n  if (cellsNextToHits.length > 0) {\n    cellsNextToHits = cellsNextToHits.reduce((acc, cv) => acc.concat(cv));\n  }\n\n  // make a list of all coords that can be attacked\n  const allUnattackedCoords = allCellsOnBoard\n    .filter((cell) => cell.attacked === false)\n    .map((cell) => [cell.y, cell.x]);\n\n  const unAttackedCellsNextToHits = cellsNextToHits.filter((coordsToTest) => {\n    return boardToAttack[coordsToTest[0]][coordsToTest[1]].attacked === false;\n  });\n\n  const arrayToSelectAttacksFrom =\n    unAttackedCellsNextToHits.length > 0\n      ? unAttackedCellsNextToHits\n      : allUnattackedCoords;\n\n  const randomCoordsIndexToAttack = Math.floor(\n    Math.random() * arrayToSelectAttacksFrom.length\n  );\n\n  // get coords from list\n  const randomCoords = arrayToSelectAttacksFrom[randomCoordsIndexToAttack];\n  // make it nice\n  const [y, x] = randomCoords;\n  return { playerID, y, x };\n};\n","import { GameContext } from \"./Game\";\nimport { useContext, useEffect, useRef } from \"react\";\nimport { createBoards } from \"./boardRenderHelper\";\nimport { GameDispatch } from \"./Game\";\nimport { aiAttack } from \"./aiAttack\";\nimport { handleTurns } from \"./gamehelpers\";\nimport { AlertContext } from \"./App\";\n\n//This component has become a veritable trashfire. To handle fades, cleanup functions are done with useRef- timeoutIDs are logged to the ref inside the useEffect. Sureley there is a better way. Refactor this...somehow.\n\nexport const AITurn = () => {\n  const addAlert = useContext(AlertContext);\n  const gameState = useContext(GameContext);\n  const { boards, playerList, players, turnIndex } = gameState;\n  const dispatch = useContext(GameDispatch);\n  // uses full playerList to render boards: All boards should be rendered here.\n  let attackTOIDs = useRef([]);\n  let nextTOIDs = useRef([]);\n  const currentPlayer = players[playerList[turnIndex]];\n  let attackHasHappened = useRef(false);\n\n  useEffect(() => {\n    if (attackHasHappened.current) {\n      attackHasHappened.current = false;\n    }\n  }, [turnIndex]);\n  useEffect(() => {\n    console.log(\"useEffect running in aiTurn\");\n    if (gameState.gameOver) return;\n    if (!gameState.allowAttack) return;\n    if (attackHasHappened.current) return;\n    attackHasHappened.current = true;\n    const currentTurn = gameState.playerList[gameState.turnIndex];\n    if (gameState.players[currentTurn].ai) {\n      const { y, x, playerID } = aiAttack(\n        currentTurn,\n        gameState.playerList,\n        gameState.boards\n      );\n      let attackedCell = boards[playerID][y][x];\n      let attackTOID = setTimeout(\n        // attack after 1 second\n        () => {\n          if (attackedCell.ship) {\n            // log message!\n            console.log(\"hit!\");\n            addAlert({\n              type: \"HIT\",\n              message: `${currentPlayer.name} attacks ${players[playerID].name}...and hits!`,\n            });\n          } else {\n            addAlert({\n              type: \"MISS\",\n              message: `${currentPlayer.name} attacks ${players[playerID].name}...and misses.`,\n            });\n          }\n          dispatch({\n            type: \"ATTACK\",\n            playerID: playerID,\n            payload: [y, x],\n          });\n        },\n        1000\n      );\n      let nextPlayerShouldBe =\n        players[playerList[handleTurns(playerList.length, turnIndex)]];\n      let timeoutDelayUntilNextTurn = nextPlayerShouldBe.ai ? 2000 : 3000;\n      let nextTOID = setTimeout(() => {\n        dispatch({\n          type: \"SET-NEXT-TURN\",\n        });\n      }, timeoutDelayUntilNextTurn);\n\n      // do something if its an AI turn\n      nextTOIDs.current.push(nextTOID);\n      attackTOIDs.current.push(attackTOID);\n    } else return;\n  }, [\n    dispatch,\n    gameState.allowAttack,\n    gameState.boards,\n    gameState.gameOver,\n    gameState.playerList,\n    gameState.players,\n    gameState.turnIndex,\n    playerList,\n    players,\n    turnIndex,\n    addAlert,\n    boards,\n    currentPlayer.name,\n  ]);\n  const cleanup = () => {\n    nextTOIDs.current.forEach((timeout) => clearTimeout(timeout));\n    attackTOIDs.current.forEach((timeout) => clearTimeout(timeout));\n  };\n  useEffect(() => {\n    return () => cleanup();\n  }, []);\n  return (\n    <div className=\"boards ai\">\n      {createBoards(boards, playerList, players, turnIndex)}\n    </div>\n  );\n};\n","import { Sidebar } from \"./styles/components\";\nimport { Board } from \"./Board\";\nimport { ShipList } from \"./ShipList\";\nimport { createBoards } from \"./boardRenderHelper\";\n\nexport const HumanTurn = ({\n  players,\n  playerList,\n  turnIndex,\n  boards,\n  ships,\n}) => {\n  const listOfPlayersToRender = playerList.filter(\n    (player) => player !== playerList[turnIndex]\n  );\n\n  // needs to handle turn transitions!\n  // hide board information between human players transitioning\n  return (\n    <>\n      <Sidebar>\n        <div className=\"turnInfo\">\n          <header>\n            <h4 className=\"currentPlayerTurn\">\n              {players[playerList[turnIndex]].name}\n            </h4>\n          </header>\n        </div>\n        <div className=\"playerInfo\">\n          <div className=\"shipInfo\">\n            <ShipList clickable={false} ships={ships[playerList[turnIndex]]} />\n          </div>\n          <Board\n            statBoard\n            board={boards[playerList[turnIndex]]}\n            playerID={playerList[turnIndex]}\n            isAI={false}\n          />\n        </div>\n      </Sidebar>\n      <div className=\"boards\">\n        {createBoards(boards, listOfPlayersToRender, players, turnIndex)}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect, useRef } from \"react\";\nimport { FadeWrapper } from \"./styles/components\";\n\nexport const TurnFader = ({ showOne, trueContent, falseContent, fadeTime }) => {\n  const [switcher, setSwitcher] = useState(showOne);\n  const [isOpaque, setIsOpaque] = useState(true);\n  const didMount = useRef(false);\n\n  //after timeout, toggle switcher\n  useEffect(() => {\n    if (!didMount.current) {\n      didMount.current = true;\n      return;\n    }\n    setIsOpaque(false);\n    let timeoutID = setTimeout(() => {\n      setSwitcher(showOne);\n      setIsOpaque(true);\n    }, fadeTime);\n\n    return () => clearTimeout(timeoutID); // end a timeout if the fader isn't showing\n  }, [fadeTime, showOne]);\n\n  return (\n    <FadeWrapper isOpaque={isOpaque} fadeTime={fadeTime}>\n      {switcher ? trueContent : falseContent}\n    </FadeWrapper>\n  );\n};\n","import { AITurn } from \"./AITurn\";\nimport { HumanTurn } from \"./HumanTurn\";\nimport { useContext, useRef, useEffect, useState } from \"react\";\nimport { GameContext } from \"./Game\";\nimport { TurnFader } from \"./turnFader\";\n\n//Is 'currentlyDisplayedTurn doing ANYTHING?. I dont think so. Refactor this...\n\nexport const Turns = () => {\n  const { boards, ships, turnIndex, playerList, players } = useContext(\n    GameContext\n  );\n  console.log(\"turn index:\", turnIndex);\n  console.log(\"playerlist\", playerList);\n  // iniitial value is of the current player\n  const [currentlyDisplayedTurn, setCurrentlyDisplayedTurn] = useState(\n    turnIndex\n  );\n  const actualCurrentPlayer = players[playerList[turnIndex]];\n  const [shouldShowAIPlayer, setshouldShowAIPlayer] = useState(\n    actualCurrentPlayer.ai\n  );\n  //change the currentlyDisplayed on a timeout after the turn changes to allow for fading.\n  const hasMounted = useRef(false); //to not run effectd on mount\n\n  useEffect(() => {\n    if (!hasMounted.current) {\n      hasMounted.current = true;\n      return;\n    }\n    setshouldShowAIPlayer(players[playerList[turnIndex]].ai);\n    const timeoutID = setTimeout(() => {\n      setCurrentlyDisplayedTurn(turnIndex);\n      console.log(\"changing currentDispTurn to\", turnIndex);\n    }, 2500);\n    return () => clearTimeout(timeoutID);\n  }, [turnIndex, players, playerList]);\n  // Human/AI turns take data from state here. State is changed by game context, but with a a timeout to keep components from rendering the wrong data.\n\n  const humanTurn = (\n    <HumanTurn\n      playerList={playerList}\n      players={players}\n      boards={boards}\n      turnIndex={currentlyDisplayedTurn}\n      ships={ships}\n    />\n  );\n\n  return (\n    <TurnFader\n      showOne={shouldShowAIPlayer}\n      trueContent={<AITurn />}\n      falseContent={humanTurn}\n      fadeTime={500}\n    />\n    // return currentPlayer.ai ? (\n    //     <AITurn />\n    // ) : (\n    //     <HumanTurn\n    //         playerList={playerList}\n    //         players={players}\n    //         boards={boards}\n    //         turnIndex={currentlyDisplayedTurn}\n    //         ships={ships}\n    //     />\n    // );\n  );\n};\n","import { GameContext, GameDispatch } from \"./Game\";\nimport { useContext } from \"react\";\nimport { Card, Button } from \"./styles/components\";\nimport { Board } from \"./Board\";\nimport { countFleetSuccess } from \"./gamehelpers\";\n\nexport const GameOver = () => {\n  const dispatch = useContext(GameDispatch);\n  const { players, playerList, boards, ships } = useContext(GameContext);\n\n  const winningPlayer = players[playerList[0]];\n  const winningPlayerShips = ships[playerList[0]];\n  const fleetStats = countFleetSuccess(winningPlayerShips);\n  return (\n    <Card>\n      <header>\n        <h2>{players[playerList[0]].name} wins!</h2>\n      </header>\n      <div className=\"content\">\n        <Board\n          over\n          statBoard\n          board={boards[playerList[0]]}\n          playerID={playerList[0]}\n          isAI={false}\n        />\n        <ul className=\"stats\">\n          <li>\n            <p>Shots:</p>\n            <p>{winningPlayer.shots}</p>\n          </li>\n          <li>\n            <p>Hit Percentage:</p>\n            <p>\n              {Math.round((winningPlayer.hits / winningPlayer.shots) * 100)}%\n            </p>\n          </li>\n          <li>\n            <p>Total hits on fleet</p>\n            <p>\n              {fleetStats.totalHits}/{fleetStats.fleetSize}\n            </p>\n          </li>\n        </ul>\n      </div>\n      <div className=\"controls\">\n        <Button\n          onClick={() => {\n            dispatch({\n              type: \"SET-MODE\",\n              payload: \"init\",\n            });\n          }}>\n          New Game\n        </Button>\n      </div>\n    </Card>\n  );\n};\n","import { Card, Button } from \"./styles/components\";\nimport { useState, useContext } from \"react\";\nimport { GameDispatch } from \"./Game\";\n\nexport const Init = () => {\n    const [playerCount, setPlayerCount] = useState(2);\n    const [aiCount, setAiCount] = useState(1);\n    const [boardSize, setBoardSize] = useState(10);\n    const dispatch = useContext(GameDispatch);\n    ///Player names??\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(\"initializing\");\n        dispatch({\n            type: \"INITIALIZE-GAME\",\n            payload: {\n                numberOfPlayers: playerCount,\n                numberOfAI: aiCount,\n                boardWidth: boardSize,\n            },\n        });\n    };\n    const handleChange = (e) => {\n        switch (e.target.name) {\n            case \"players\": {\n                setPlayerCount(parseInt(e.target.value));\n                break;\n            }\n            case \"aiCount\": {\n                setAiCount(parseInt(e.target.value));\n                break;\n            }\n            case \"boardSize\": {\n                setBoardSize(parseInt(e.target.value));\n                break;\n            }\n            default:\n                break;\n        }\n    };\n    return (\n        <Card>\n            <header>\n                <h2>Game Setup</h2>\n            </header>\n            <div className=\"content\">\n                <form onSubmit={handleSubmit}>\n                    <ul className=\"initForm\">\n                        <li className=\"initInput\">\n                            <label htmlFor=\"totalPlayers\">\n                                Total Number of Players:\n                            </label>\n                            <input\n                                type=\"number\"\n                                value={playerCount}\n                                name=\"players\"\n                                id=\"totalPlayers\"\n                                min={2}\n                                max={4}\n                                onChange={handleChange}\n                            />\n                        </li>\n                        <li className=\"initInput\">\n                            <label htmlFor=\"totalAI\">\n                                Number of AI players:\n                            </label>\n                            <input\n                                type=\"number\"\n                                value={aiCount}\n                                name=\"aiCount\"\n                                id=\"totalAI\"\n                                min={0}\n                                max={playerCount}\n                                onChange={handleChange}\n                            />\n                        </li>\n                        <li className=\"initInput\">\n                            <label htmlFor=\"boardSize\">Width of Board:</label>\n                            <input\n                                type=\"number\"\n                                value={boardSize}\n                                name=\"boardSize\"\n                                id=\"boardSize\"\n                                min={8}\n                                max={15}\n                                onChange={handleChange}\n                            />\n                        </li>\n                    </ul>\n                </form>\n            </div>\n            <div className=\"controls\">\n                <Button onClick={handleSubmit}>Start</Button>\n            </div>\n        </Card>\n    );\n};\n","import { Button, Card, PlayerNameForm } from \"./styles/components\";\nimport { useState, useContext } from \"react\";\nimport { GameContext, GameDispatch } from \"./Game\";\n\nexport const NamePlayers = () => {\n  const dispatch = useContext(GameDispatch);\n  const { players, playerList } = useContext(GameContext);\n  const humanPlayerList = playerList.filter(\n    (player) => players[player].ai === false\n  );\n\n  const initInputState = () => {\n    let stateObject = {};\n    for (let humanPlayerID of humanPlayerList) {\n      console.log(humanPlayerID);\n      stateObject[humanPlayerID] = players[humanPlayerID].name;\n    }\n    return stateObject;\n  };\n\n  const [formData, setFormData] = useState(() => initInputState());\n\n  const handleChange = (e) => {\n    const playerID = e.target.name;\n    setFormData((state) => ({ ...state, [playerID]: e.target.value }));\n  };\n\n  const createArrayForDispatch = () => {\n    //this just feels easier to handle than an object\n    return humanPlayerList.map((player) => ({\n      playerID: player,\n      name: formData[player],\n    }));\n  };\n\n  const createFormFields = () => {\n    return humanPlayerList.map((player, index) => {\n      return (\n        <li key={`input_for_${player}`}>\n          <label htmlFor={`${player}_input`}>Player {index + 1}</label>\n          <input\n            onChange={handleChange}\n            id={`${player}_input`}\n            type=\"text\"\n            name={`${player}`}\n            value={formData[player]}\n          />\n        </li>\n      );\n    });\n  };\n  return (\n    <Card>\n      <header>\n        <h2>Player Names</h2>\n      </header>\n      <div className=\"content\">\n        <PlayerNameForm>\n          <ul>{createFormFields()}</ul>\n        </PlayerNameForm>\n      </div>\n      <div className=\"controls\">\n        <Button\n          onClick={() => {\n            dispatch({\n              type: \"SET-PLAYER-NAMES\",\n              payload: createArrayForDispatch(),\n            });\n          }}>\n          Start Game\n        </Button>\n      </div>\n    </Card>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { FadeWrapper } from \"./styles/components\";\n\nexport const FadeSwitch = ({ optionsObject, currentOption, fadeTime }) => {\n  const [isOpaque, setIsOpaque] = useState(false);\n  const [currentlyRendered, setCurrentlyRendered] = useState(currentOption);\n\n  useEffect(() => {\n    setIsOpaque(false);\n    setTimeout(() => {\n      setCurrentlyRendered(currentOption);\n      setIsOpaque(true);\n    }, fadeTime);\n  }, [currentOption, fadeTime]);\n\n  return (\n    <FadeWrapper isOpaque={isOpaque} fadeTime={fadeTime}>\n      {optionsObject[currentlyRendered]}\n    </FadeWrapper>\n  );\n};\n","import { ReadyPrompt } from \"./ReadyPrompt\";\nimport { GameContext } from \"./Game\";\nimport { GameDispatch } from \"./Game\";\nimport { useContext } from \"react\";\nimport { Placement } from \"./Placement\";\nimport { Turns } from \"./Turns\";\nimport { GameOver } from \"./GameOver\";\nimport { Init } from \"./Init\";\nimport { NamePlayers } from \"./NamePlayers\";\nimport { TurnFader } from \"./turnFader\";\nimport { FadeSwitch } from \"./FadeSwitch\";\n\nexport const GameModeHelper = ({ mode }) => {\n  const {\n    playerList,\n    players,\n    turnIndex,\n    currentTurnPlayerIsReady,\n    gameOver,\n  } = useContext(GameContext);\n\n  const currentTurnPlayerID = gameOver ? playerList[0] : playerList[turnIndex];\n\n  const dispatch = useContext(GameDispatch);\n\n  const setPlayerReady = (playerID) => {\n    dispatch({ type: \"SET-TURN-READY\" });\n  };\n  const prompt = (\n    <ReadyPrompt\n      playerID={currentTurnPlayerID}\n      playerName={players[currentTurnPlayerID].name}\n      setPlayerReady={setPlayerReady}\n    />\n  );\n  const turns = <Turns />;\n  const modeDisplayOptions = {\n    init: <Init />,\n    namePlayers: <NamePlayers />,\n    setup: <Placement />,\n    play: (\n      <TurnFader\n        showOne={currentTurnPlayerIsReady}\n        trueContent={turns}\n        falseContent={prompt}\n        fadeTime={300}\n      />\n    ),\n    over: <GameOver />,\n  };\n\n  return (\n    <FadeSwitch\n      optionsObject={modeDisplayOptions}\n      currentOption={mode}\n      fadeTime={500}\n    />\n  );\n};\n","import { createContext, useReducer } from \"react\";\nimport {\n  defaultInitialState,\n  createInitialState,\n  gameReducer,\n} from \"./refactoredLogic\";\nimport { GameModeHelper } from \"./gameModeHelper\";\n\nexport const GameContext = createContext(null);\nexport const GameDispatch = createContext(null);\n\nexport const Game = () => {\n  const [gameState, dispatch] = useReducer(\n    gameReducer,\n    defaultInitialState,\n    createInitialState\n  );\n\n  return (\n    <GameContext.Provider value={gameState}>\n      <GameDispatch.Provider value={dispatch}>\n        <GameModeHelper mode={gameState.gameMode} />\n      </GameDispatch.Provider>\n    </GameContext.Provider>\n  );\n};\n","import \"./App.css\";\nimport { Game } from \"./Game\";\nimport { createContext } from \"react\";\nimport { useAlert } from \"./useAlert\";\nexport const AlertContext = createContext();\n\nfunction App() {\n  const [alerts, addAlert] = useAlert(1, 2000);\n  return (\n    <>\n      <header>\n        <h1>Battle Boat</h1>\n      </header>\n      <AlertContext.Provider value={addAlert}>\n        <div className=\"contentContainer\">\n          <Game />\n        </div>\n      </AlertContext.Provider>\n      {alerts}\n    </>\n  );\n}\n\nexport default App;\n","import { useState, useRef } from \"react\";\nimport { AlertMessage, MessageBox } from \"./styles/components\";\n\nexport const useAlert = (maxMessages, displayTime) => {\n  const [alerts, setAlerts] = useState([]);\n  const timeoutIDs = useRef([]);\n\n  const addAlert = ({ type, message }) => {\n    setAlerts((oldAlerts) => {\n      if (oldAlerts.length >= maxMessages - 1) {\n        return [...oldAlerts.slice(1), { type, message }];\n      }\n      return [...oldAlerts, { type, message }];\n    });\n    // clear oldest alert after displaytime\n    timeoutIDs.current.push(setTimeout(clearOldestAlert, displayTime));\n  };\n  const clearOldestAlert = () => {\n    setAlerts((oldAlerts) => {\n      timeoutIDs.current.shift();\n      return oldAlerts.slice(1);\n    });\n  };\n  const layoutAlert = (alert, index) => {\n    return (\n      <AlertMessage type={alert.type} key={\"alert_\" + index}>\n        {alert.message}\n        <span\n          onClick={() => {\n            clearSpecificAlert(index);\n          }}>\n          close\n        </span>\n      </AlertMessage>\n    );\n  };\n  const clearSpecificAlert = (index) => {\n    setAlerts((oldAlerts) => {\n      return oldAlerts.slice(0, index).concat(oldAlerts.slice(index + 1));\n    });\n  };\n  const fillMessageBox = () => {\n    return <MessageBox>{alerts.map(layoutAlert)}</MessageBox>;\n  };\n\n  return [fillMessageBox(), addAlert];\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { GlobalStyle } from \"./styles/components\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}